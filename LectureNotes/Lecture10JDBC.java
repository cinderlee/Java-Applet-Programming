// JDBC
// create a relational database - tie in information with relationships
// relationship - what are appropriate relationships, what are ways we can store things better
// relationship between student id and name -- doesnt change automatically

// How database information is stored 
// utilize information in a useful manner in Java program 
// how does Java do databases 


// JDBC 
// we don't want to have to know too much about the database management system
// DMS - program running on machine -- program responsible for storing the information inside the database
// DMS - gateway to the information 
// DMS - idea of being able to access the data in a standardized way regardless of dms system we are working with 
// different DMS we can use - yet be able to change from one to the other without having to worry about rewriting software

// History
// old mainframe days - files that were stored on system 
// files could be accessed through a library - need to know which library to use 
// how do we access items in a file - items in a file were organized/separated bty commas for example 
// file - we have a table separated by commas and would like to be able to access individual values 
// spreadsheet - format, items that are particular rows -- tuple (really just a row), diff columns as you go across the tuple
// spreadsheet inside of a file -- multiple files = multiple spreadsheets
// imagine student identifier in the tuple, phone number data etc 
// need to know which column is the first name, family name, etc... 
// would rather have a library that could manage knowing that column1 is student identifier, column 2 - etc... 
// IBM mainframe - library that would do that -- need to know which library 
// distributed systems, things get even harder - have a fully distributed system in which you may not know what protocol to use to speak to another server 
// standardized language - for accessing items on a Database management server -- use SQL 
// SQL - langauge to communicate between all of the DMS - 4 main ones: microsoft sql server, oracle, mariadb (previous mysql - but bought by oracle), postgresql 
// large scale db management system 
// little tiny difference in how your java program communicates with the servers (microsoft vs oracle server)


// use JDBC - Java Database Connectivity
// standardize way to communicate to SQL server 
// Unfortunately, Microsoft and Oracle are different enough that things won't work perfectly via just flipping switch
// different ways to make queries etc
// standardized way for authentication, connection, and in and out way to get things out of the database 

// mysql workbench 
// storing capability to store data 
// DDL and DML 
// Cars database - tables 
// table = one spreadsheet of information that we will store about models or manufacturers
// what columns do we want to have in this table 
// use column names: mfgrID (manufacturer ID)
// store pieces of information in organized manner 
// define limits of values separately - datatype: int, varchar (set max limit)
// varchar, int, decimal, datatime, blob
// blob - binary large object 

// primary key - under no circumstances is there a possibility of two tuples with the same value in this field
// primary key - no way two tuples have the same value for primary key
// cannot add a tuple for same value of primary key
// mfgrID - automatically incrementing, start off with 1 - and as we insert more and more, will be generated by db manager by incrementing by 1
// have multiple threads, accessing this table - unsafe looking at max primary key, and using the next + 1
// if interrupted - in synchrony, dbms wont be happy about it when you take the max and interrupts and max doesn't change 
// tell the system to increase instead 

// other columns: name and mfgrPhone (allow to be null)
// DDL - data definition language
// clauses 
// insert into manufacturers(name, mfgrPhone) values ('jeep', '1-877-426-5327')
// update manufacturers set mfgrPhone='1-800-999-1009' - CHANGES ALL THE ROWS 
// update manufacturers set mfgrPhone='1-800-999-1009' where mfgr=12;
// delete from manufacturers -- deletes everything from the table
// delete from manufacturers where mfgrId = 10
// select statements to get information from the database system
// select * from manufacturers;
// select the columns you want to select from and table from the db
// select name, mfgrPhone from manufactuers where mfgrPhone != ''

// NULL is a special term
// select name, mfgrPhone from manufacturers where not isnull(mfgrPhone)
// we get back a table from the select statement
// select name, price, thoughts from reviews where thoughts like "%!%" order by Price DESC, name DESC
// ^ has a ! in the thoughts

package cs3913spring2020jdbc;

import java.sql.*;
import java.io.*;

public class CS3913Spring2020JDBC{
    public static void main (String[] args){
        Connection conn = null; 
        // connection is a java sql 
        try{
            // Class.forName("org.mariadb.jdbc.Driver").newInstance();
            // creating a new instance of driver in memory 
            // important we do that 
            // newInstance is however depracated 
            // String url = "jdbc:mariadb://69.38.174.57:3600/cs3913"
            String url = "jdbc:mariadb://127.0.0.1:3306/cs3913";
            // url has a lot of information - tell sql connection class how to connect to the db
            // approximates a url for a website 
            // jdbc url -- uses mariadb driver 
            // server name/ip address - followed by port and schema name 
            String dbuser = "cs3913";
            // to get on dbms - lots of ways, some use certificates 
            String password = "abc123";
            conn = DriverManager.getConnection(url, dbuser, password);
            System.out.println("GOT HERE!");

            Statement s = conn.createStatement();
            ResultSet rs = s.executeQuery("select * from review3;");
            // s.executeQuery("select ID, Thoughts, Price, name from review3")
            
            // java.sql statement class 
            // execute - returns a boolean (insert, update, or delete)
            // executeQuery -- different, get back a result set for a select statement
            // sql requires a semicolon
            // get result set, we can then process it 
            // result set has a pointer built into it 
            // iterator starts off at a 0 position -- needs to call next once to even access that first row 
            // next returns a boolean if there's anything more to use 
            
            while(rs.next()){
                // can ask java to give back an int value as a string 
                // converted from integer to string and if it doesn't make sense -- will get back an error
                // ex: converting name to an integer --> error 
                // there's a bunch of get methods -> getLong, getBlob, etc.
                // column numbers start at 1!! to confuse you 
                int id = rd.getInt(1); // get the ID number <- number 1 means the first column
                String name = rs.getString("Name") // or provide the column name
                int price = rs.getInt("Price");
                String thoughts = rs.getString("Thoughts"); // capitalization matters
                System.out.println(id + "," + name + "," + price + "," + thoughts);
            }
            rs.close(); // close result set
            s.close();  // close statement
            conn.close(); // close connection
            // need to close these because they take up memory and are limited to opening a number of result sets and statements
            // exception will be raised if you try to access a non-existent column

        }
        catch(Exception e){
            System.out.println("Error: " + e.toString());
        }
    }
}

// connectors on resources 
// a jar file 
// in the library add a JAR file for the project 
// recognizing the classes that were created by mariadb for the access to mysql server
// needs the jar file in the project for the connection 
// standardized ways of accessing the values 
// xkcd bobby tales comic about computer science
// make sure the data you are getting and putting in to database is sanitized
// possible for 

// insert into mottos (name, nnum, mottos) VALUES ('Dan', '12345', )